'use client'
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Progress } from "@/components/ui/progress"
import { experimental_useObject as useObject } from '@ai-sdk/react';
import { z } from "zod";
// import ChatInput from "../components/chat-input";
export default function Home() {
    const router = useRouter();
    // const [title, setTitle] = useState<string>('')
    // const [suggestions, setSuggestions] = useState<{ title: string, artist: string }[]>([])
    const [isLoading, setIsLoading] = useState<boolean>(true)
    // const [analysis, setAnalysis] = useState<string>('')
    // const [suggestionSummary, setSuggestionSummary] = useState<string>('')
    const [progress, setProgress] = useState<number>(0)
    const { object, submit } = useObject({
        api: '/api/ai/playlist-suggestions',
        schema: z.object({
            title: z.string().describe("A short title summarizing the playlist."),
            playlist: z.array(
                z.object({
                    title: z.string().describe("The title of the song."),
                    artist: z.string().describe("The name of the artist."),
                    genre: z.string(),
                    genreColor: z.string(),
                })
            ).describe("A list of songs in the playlist."),
            analysis: z.string().describe("A short explanation of how the playlist matches the user's inputs and preferences."),
            suggestionSummary: z.string().describe("A concise summary of the suggested playlist, highlighting themes and notable choices.")
        }),
      });
    useEffect(() => {
        const temp_chat = sessionStorage.getItem("temp_chat")
        if (!temp_chat || temp_chat === "") {
            router.push('/')
        }
        setIsLoading(true)
        submit({
            prompt: temp_chat,
        });
        setIsLoading(false)
      }, [])

    useEffect(() => {
        if (isLoading) {
            const interval = setInterval(() => {
                setProgress((prevProgress) => (prevProgress >= 100 ? 100 : prevProgress + 8));
            }, 1000);

            return () => clearInterval(interval);
        }
    }, [isLoading]);
    

    return (
      <div className="main">
           <div className="my-12">
            <div className="w-full mx-auto">
              <h1 className="text-3xl font-bold tracking-tighter">{(isLoading || !object?.title) ? 'Loading...' : object.title}</h1>
              <div className="mt-6">
                <div className="text-lg font-medium">{(object?.analysis && object.analysis)}</div>
                <div className="text-lg font-medium mt-4">{(object?.suggestionSummary && object.suggestionSummary)}</div>
                <div className="mt-4">
                  {isLoading && <Progress value={progress} />
                }
                {!isLoading && (
                    <div className="p-4 bg-gray-100 rounded">
                    <ul className="pl-4 list-disc" translate="no">
                      {(!isLoading && object?.playlist) && object.playlist.map((suggestion, index) => (
                        <li key={index} className="mb-2">{suggestion?.title} by {suggestion?.artist} {suggestion?.genre && (
                          <sup className={`${suggestion?.genreColor} py-1 px-2 rounded-lg text-[10px] whitespace-nowrap ml-2`}>{suggestion?.genre}</sup>
                        )}</li>
                      ))}
                      </ul>
                    </div>
                )}
                <p className="mt-4 text-amber-700">The information is generated by AI, and it can make mistake. Check before you use.</p>
                </div>
              </div>
            </div>
          </div>
          {/* <ChatInput /> */}
      </div>
    );
  }